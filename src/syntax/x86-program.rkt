#lang racket

(require "deps.rkt")

(provide (struct-out Imm)
         (struct-out Reg)
         (struct-out Deref)
         (struct-out Instr)
         (struct-out Callq)
         (struct-out Retq)
         (struct-out Jmp)
         (struct-out Block)
         (struct-out X86Program))

;; <reg> ::= rsp | rbp | rax | rbx | rcx | rdx | rsi | rdi
;;         | r8 | r9 | r10 | r11 | r12 | r13 | r14 | r15
;; <arg> ::= (Imm <int>)
;;         | (Reg <reg>)
;;         | (Deref <reg> <int>)
;; <instr> ::= (Instr addq (<arg> <arg>))
;;           | (Instr subq (<arg> <arg>))
;;           | (Instr negq (<arg>))
;;           | (Instr movq (<arg> <arg>))
;;           | (Instr pushq (<arg>))
;;           | (Instr popq (<arg>))
;;           | (Callq <label> <int>)
;;           | (Retq)
;;           | (Jmp <label>)
;; <block> ::= (Block <info> (<instr> … ))
;; <x86Int> ::= (X86Program <info> ((<label> . <block>) … ))

(define-data Imm [value])
(define-data Reg [name])
(define-data Deref [reg offset])
(define-data Instr [name arg*])
(define-data Callq [target arity])
(define-data Retq [])
(define-data Jmp [target])
(define-data Block [info instr*])
(define-data X86Program [info blocks])
